/* Character Name Generator v.1.0.2
 * --------------------------------------------------------------------------------------------------------------------------------------------------
 * 
 * This file is part of Character Name Generator which is released under the Unity Asset Store End User License Agreement.
 * See file Documentation.pdf or go to https://unity3d.com/legal/as_terms for full license details.
 * 
 * Copyright (c) : 2019
 * Flight Paper Studio LLC
 */

using System.Collections.Generic;

namespace CNG
{
	/// <summary>
	/// A class for converting stand-in special characters into either Unicode characters or ASCII characters.
	/// This class currently only supports the Latin Extended-A Unicode block.
	/// </summary>
	public static class UnicodeManager
	{
		#region Unicode Data

		private static Dictionary<int, string> specialCharacters = new Dictionary<int, string>
		{
			{ 256, "<A/>" },
			{ 257, "<a/>" },
			{ 258, "<A^>" },
			{ 259, "<a^>" },
			{ 260, "<A,>" },
			{ 261, "<a,>" },
			{ 262, "<C'>" },
			{ 263, "<c'>" },
			{ 264, "<C^>" },
			{ 265, "<c^>" },
			{ 266, "<C.>" },
			{ 267, "<c.>" },
			{ 268, "<CH>" },
			{ 269, "<ch>" },
			{ 270, "<D'>" },
			{ 271, "<d'>" },
			{ 272, "<D->" },
			{ 273, "<d->" },
			{ 274, "<E/>" },
			{ 275, "<e/>" },
			{ 276, "<E^>" },
			{ 277, "<e^>" },
			{ 278, "<E.>" },
			{ 279, "<e.>" },
			{ 280, "<E,>" },
			{ 281, "<e,>" },
			{ 282, "<EC>" },
			{ 283, "<ec>" },
			{ 284, "<GC>" },
			{ 285, "<gc>" },
			{ 286, "<G^>" },
			{ 287, "<g^>" },
			{ 288, "<G.>" },
			{ 289, "<g.>" },
			{ 290, "<G,>" },
			{ 291, "<g'>" },
			{ 292, "<H^>" },
			{ 293, "<h^>" },
			{ 294, "<H->" },
			{ 295, "<h->" },
			{ 296, "<I~>" },
			{ 297, "<i~>" },
			{ 298, "<I/>" },
			{ 299, "<i/>" },
			{ 300, "<I^>" },
			{ 301, "<i^>" },
			{ 302, "<I,>" },
			{ 303, "<i,>" },
			{ 304, "<I.>" },
			{ 305, "<i.>" },
			{ 306, "<IJ>" },
			{ 307, "<ij>" },
			{ 308, "<J^>" },
			{ 309, "<j^>" },
			{ 310, "<K,>" },
			{ 311, "<k,>" },
			{ 312, "<kr>" },
			{ 313, "<L'>" },
			{ 314, "<l'>" },
			{ 315, "<L,>" },
			{ 316, "<l,>" },
			{ 317, "<LC>" },
			{ 318, "<lc>" },
			{ 319, "<L->" },
			{ 320, "<l->" },
			{ 321, "<L/>" },
			{ 322, "<l/>" },
			{ 323, "<N'>" },
			{ 324, "<n'>" },
			{ 325, "<N,>" },
			{ 326, "<n,>" },
			{ 327, "<N^>" },
			{ 328, "<n^>" },
			{ 329, "<'n>" },
			{ 330, "<NG>" },
			{ 331, "<ng>" },
			{ 332, "<O/>" },
			{ 333, "<o/>" },
			{ 334, "<O^>" },
			{ 335, "<o^>" },
			{ 336, "<O'>" },
			{ 337, "<o'>" },
			{ 338, "<OE>" },
			{ 339, "<oe>" },
			{ 340, "<R'>" },
			{ 341, "<r'>" },
			{ 342, "<R,>" },
			{ 343, "<r,>" },
			{ 344, "<R^>" },
			{ 345, "<r^>" },
			{ 346, "<S'>" },
			{ 347, "<s'>" },
			{ 348, "<S^>" },
			{ 349, "<s^>" },
			{ 350, "<S,>" },
			{ 351, "<s,>" },
			{ 352, "<SC>" },
			{ 353, "<sc>" },
			{ 354, "<T,>" },
			{ 355, "<t,>" },
			{ 356, "<T^>" },
			{ 357, "<t^>" },
			{ 358, "<T->" },
			{ 359, "<t->" },
			{ 360, "<U~>" },
			{ 361, "<u~>" },
			{ 362, "<U/>" },
			{ 363, "<u/>" },
			{ 364, "<U^>" },
			{ 365, "<u^>" },
			{ 366, "<UO>" },
			{ 367, "<uo>" },
			{ 368, "<U'>" },
			{ 369, "<u'>" },
			{ 370, "<U,>" },
			{ 371, "<u,>" },
			{ 372, "<W^>" },
			{ 373, "<w^>" },
			{ 374, "<Y^>" },
			{ 375, "<y^>" },
			{ 376, "<Y'>" },
			{ 377, "<Z'>" },
			{ 378, "<z'>" },
			{ 379, "<Z.>" },
			{ 380, "<z.>" },
			{ 381, "<Z^>" },
			{ 382, "<z^>" },
			{ 383, "<ls>" }
		};

		private static Dictionary<int, string> unicodeCharacters = new Dictionary<int, string>
		{
			{ 256, "Ā" },
			{ 257, "ā" },
			{ 258, "Ă" },
			{ 259, "ă" },
			{ 260, "Ą" },
			{ 261, "ą" },
			{ 262, "Ć" },
			{ 263, "ć" },
			{ 264, "Ĉ" },
			{ 265, "ĉ" },
			{ 266, "Ċ" },
			{ 267, "ċ" },
			{ 268, "Č" },
			{ 269, "č" },
			{ 270, "Ď" },
			{ 271, "ď" },
			{ 272, "Đ" },
			{ 273, "đ" },
			{ 274, "Ē" },
			{ 275, "ē" },
			{ 276, "Ĕ" },
			{ 277, "ĕ" },
			{ 278, "Ė" },
			{ 279, "ė" },
			{ 280, "Ę" },
			{ 281, "ę" },
			{ 282, "Ě" },
			{ 283, "ě" },
			{ 284, "Ĝ" },
			{ 285, "ĝ" },
			{ 286, "Ğ" },
			{ 287, "ğ" },
			{ 288, "Ġ" },
			{ 289, "ġ" },
			{ 290, "Ģ" },
			{ 291, "ģ" },
			{ 292, "Ĥ" },
			{ 293, "ĥ" },
			{ 294, "Ħ" },
			{ 295, "ħ" },
			{ 296, "Ĩ" },
			{ 297, "ĩ" },
			{ 298, "Ī" },
			{ 299, "ī" },
			{ 300, "Ĭ" },
			{ 301, "ĭ" },
			{ 302, "Į" },
			{ 303, "į" },
			{ 304, "İ" },
			{ 305, "ı" },
			{ 306, "Ĳ" },
			{ 307, "ĳ" },
			{ 308, "Ĵ" },
			{ 309, "ĵ" },
			{ 310, "Ķ" },
			{ 311, "ķ" },
			{ 312, "ĸ" },
			{ 313, "Ĺ" },
			{ 314, "ĺ" },
			{ 315, "Ļ" },
			{ 316, "ļ" },
			{ 317, "Ľ" },
			{ 318, "ľ" },
			{ 319, "Ŀ" },
			{ 320, "ŀ" },
			{ 321, "Ł" },
			{ 322, "ł" },
			{ 323, "Ń" },
			{ 324, "ń" },
			{ 325, "Ņ" },
			{ 326, "ņ" },
			{ 327, "Ň" },
			{ 328, "ň" },
			{ 329, "ŉ" },
			{ 330, "Ŋ" },
			{ 331, "ŋ" },
			{ 332, "Ō" },
			{ 333, "ō" },
			{ 334, "Ŏ" },
			{ 335, "ŏ" },
			{ 336, "Ő" },
			{ 337, "ő" },
			{ 338, "Œ" },
			{ 339, "œ" },
			{ 340, "Ŕ" },
			{ 341, "ŕ" },
			{ 342, "Ŗ" },
			{ 343, "ŗ" },
			{ 344, "Ř" },
			{ 345, "ř" },
			{ 346, "Ś" },
			{ 347, "ś" },
			{ 348, "Ŝ" },
			{ 349, "ŝ" },
			{ 350, "Ş" },
			{ 351, "ş" },
			{ 352, "Š" },
			{ 353, "š" },
			{ 354, "Ţ" },
			{ 355, "ţ" },
			{ 356, "Ť" },
			{ 357, "ť" },
			{ 358, "Ŧ" },
			{ 359, "ŧ" },
			{ 360, "Ũ" },
			{ 361, "ũ" },
			{ 362, "Ū" },
			{ 363, "ū" },
			{ 364, "Ŭ" },
			{ 365, "ŭ" },
			{ 366, "Ů" },
			{ 367, "ů" },
			{ 368, "Ű" },
			{ 369, "ű" },
			{ 370, "Ų" },
			{ 371, "ų" },
			{ 372, "Ŵ" },
			{ 373, "ŵ" },
			{ 374, "Ŷ" },
			{ 375, "ŷ" },
			{ 376, "Ÿ" },
			{ 377, "Ź" },
			{ 378, "ź" },
			{ 379, "Ż" },
			{ 380, "ż" },
			{ 381, "Ž" },
			{ 382, "ž" },
			{ 383, "ſ" }
		};

		private static Dictionary<int, string> asciiCharacters = new Dictionary<int, string>
		{
			{ 256, "A" },
			{ 257, "a" },
			{ 258, "A" },
			{ 259, "a" },
			{ 260, "A" },
			{ 261, "a" },
			{ 262, "C" },
			{ 263, "c" },
			{ 264, "C" },
			{ 265, "c" },
			{ 266, "C" },
			{ 267, "c" },
			{ 268, "C" },
			{ 269, "c" },
			{ 270, "D" },
			{ 271, "d" },
			{ 272, "D" },
			{ 273, "d" },
			{ 274, "E" },
			{ 275, "e" },
			{ 276, "E" },
			{ 277, "e" },
			{ 278, "E" },
			{ 279, "e" },
			{ 280, "E" },
			{ 281, "e" },
			{ 282, "E" },
			{ 283, "e" },
			{ 284, "G" },
			{ 285, "g" },
			{ 286, "G" },
			{ 287, "g" },
			{ 288, "G" },
			{ 289, "g" },
			{ 290, "G" },
			{ 291, "g" },
			{ 292, "H" },
			{ 293, "h" },
			{ 294, "H" },
			{ 295, "h" },
			{ 296, "I" },
			{ 297, "i" },
			{ 298, "I" },
			{ 299, "i" },
			{ 300, "I" },
			{ 301, "i" },
			{ 302, "I" },
			{ 303, "i" },
			{ 304, "I" },
			{ 305, "i" },
			{ 306, "IJ" },
			{ 307, "ij" },
			{ 308, "J" },
			{ 309, "j" },
			{ 310, "K" },
			{ 311, "k" },
			{ 312, "k" },
			{ 313, "L" },
			{ 314, "l" },
			{ 315, "L" },
			{ 316, "l" },
			{ 317, "L" },
			{ 318, "l" },
			{ 319, "L" },
			{ 320, "l" },
			{ 321, "L" },
			{ 322, "l" },
			{ 323, "N" },
			{ 324, "n" },
			{ 325, "N" },
			{ 326, "n" },
			{ 327, "N" },
			{ 328, "n" },
			{ 329, "n" },
			{ 330, "N" },
			{ 331, "n" },
			{ 332, "O" },
			{ 333, "o" },
			{ 334, "O" },
			{ 335, "o" },
			{ 336, "O" },
			{ 337, "o" },
			{ 338, "OE" },
			{ 339, "oe" },
			{ 340, "R" },
			{ 341, "r" },
			{ 342, "R" },
			{ 343, "r" },
			{ 344, "R" },
			{ 345, "r" },
			{ 346, "S" },
			{ 347, "s" },
			{ 348, "S" },
			{ 349, "s" },
			{ 350, "S" },
			{ 351, "s" },
			{ 352, "S" },
			{ 353, "s" },
			{ 354, "T" },
			{ 355, "t" },
			{ 356, "T" },
			{ 357, "t" },
			{ 358, "T" },
			{ 359, "t" },
			{ 360, "U" },
			{ 361, "u" },
			{ 362, "U" },
			{ 363, "u" },
			{ 364, "U" },
			{ 365, "u" },
			{ 366, "U" },
			{ 367, "u" },
			{ 368, "U" },
			{ 369, "u" },
			{ 370, "U" },
			{ 371, "u" },
			{ 372, "W" },
			{ 373, "w" },
			{ 374, "Y" },
			{ 375, "y" },
			{ 376, "Y" },
			{ 377, "Z" },
			{ 378, "z" },
			{ 379, "Z" },
			{ 380, "z" },
			{ 381, "Z" },
			{ 382, "z" },
			{ 383, "s" }
		};

		#endregion // Unicode Data

		#region Public Functions

		/// <summary>
		/// Checks whether or not a name contains any special characters that need to be converted.
		/// </summary>
		/// <param name="name"> The name being checked for special characters. </param>
		/// <returns> Whether or not the name contains any special characters. </returns>
		public static bool SpecialCharacterCheck ( string name )
		{
			// Check for any special character
			return name.Contains ( "<" ) && name.Contains ( ">" );
		}

		/// <summary>
		/// Converts special characters into either Unicode characters or ASCII characters.
		/// </summary>
		/// <param name="name"> The name containing any possible special characters to convert. </param>
		/// <param name="useUnicode"> Whether to convert special characters into Unicode characters (true) or ASCII characters (false). </param>
		/// <returns> The name with converted characters. </returns>
		public static string ConvertSpecialCharacter ( string name, bool useUnicode = true )
		{
			// Go through the list of special characters
			for ( int i = 256; i <= 383; i++ )
			{
				// Check for special character
				if ( specialCharacters.ContainsKey ( i ) && name.Contains ( specialCharacters [ i ] ) )
				{
					// Convert special character
					name = name.Replace ( specialCharacters [ i ], useUnicode ? unicodeCharacters [ i ] : asciiCharacters [ i ] );
				}
			}
			
			// Return converted name
			return name;
		}

		#endregion // Public Functions
	}
}